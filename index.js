const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');

const app = express();
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const SHEET_ID = process.env.SHEET_ID;
const GOOGLE_SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
const userStates = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
async function getSheet(sheetName) {
  const doc = new GoogleSpreadsheet(SHEET_ID);
  
  await doc.useServiceAccountAuth({
    client_email: GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: GOOGLE_PRIVATE_KEY,
  });
  
  await doc.loadInfo();
  return doc.sheetsByTitle[sheetName];
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook
app.post('/webhook', async (req, res) => {
  try {
    await bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error('Webhook error:', error);
    res.sendStatus(500);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  const message = `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ß–ì–ö –ù–æ–≤—ã–π –ì–æ–¥ 2025!</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üîπ /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
üîπ /answer - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
üîπ /myteam - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
üîπ /help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã! üëá`;

  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const message = `‚ùì <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

<b>1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ: /register
–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã | –£—á–∞—Å—Ç–Ω–∏–∫1, –£—á–∞—Å—Ç–Ω–∏–∫2, –£—á–∞—Å—Ç–Ω–∏–∫3</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>–ó–Ω–∞—Ç–æ–∫–∏ | –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤, –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞</code>

<b>2. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞:</b>
–û—Ç–ø—Ä–∞–≤—å—Ç–µ: /answer
–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ | –í–∞—à –æ—Ç–≤–µ—Ç</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>1 | –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω</code>

‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`;

  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /register
bot.onText(/\/register/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
  try {
    const sheet = await getSheet('teams');
    const rows = await sheet.getRows();
    const existingTeam = rows.find(row => row.get('chatId') == chatId);
    
    if (existingTeam) {
      await bot.sendMessage(chatId, 
        `‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É: <b>${existingTeam.get('teamName')}</b>\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.`,
        { parse_mode: 'HTML' }
      );
      return;
    }
  } catch (error) {
    console.error('Error checking existing team:', error);
  }
  
  userStates[userId] = { action: 'register' };
  
  const message = `üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

<code>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã | –£—á–∞—Å—Ç–Ω–∏–∫1, –£—á–∞—Å—Ç–Ω–∏–∫2, –£—á–∞—Å—Ç–Ω–∏–∫3</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>–ó–Ω–∞—Ç–æ–∫–∏ | –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤, –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞</code>

‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª | (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞) –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.`;

  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /answer
bot.onText(/\/answer/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞
  try {
    const sheet = await getSheet('teams');
    const rows = await sheet.getRows();
    const team = rows.find(row => row.get('chatId') == chatId);
    
    if (!team) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–º–æ—â—å—é /register');
      return;
    }
    
    userStates[userId] = { action: 'answer', teamName: team.get('teamName') };
    
    const message = `‚úçÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞</b>

–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: <b>${team.get('teamName')}</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ | –í–∞—à –æ—Ç–≤–µ—Ç</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>1 | –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω</code>

‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª | (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞) –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è.`;

    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error getting team:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥—ã');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /myteam
bot.onText(/\/myteam/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const sheet = await getSheet('teams');
    const rows = await sheet.getRows();
    const team = rows.find(row => row.get('chatId') == chatId);
    
    if (!team) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register');
      return;
    }
    
    const message = `üë• <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ:</b>

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <b>${team.get('teamName')}</b>
üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${team.get('people')}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(team.get('dateReg')).toLocaleString('ru-RU')}`;

    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error getting team info:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) {
    return; // –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  }
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const state = userStates[userId];
  
  if (!state) {
    await bot.sendMessage(chatId, '‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  if (state.action === 'register') {
    if (!text.includes('|')) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã | –£—á–∞—Å—Ç–Ω–∏–∫1, –£—á–∞—Å—Ç–Ω–∏–∫2</code>', { parse_mode: 'HTML' });
      return;
    }
    
    const parts = text.split('|');
    if (parts.length !== 2) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª |');
      return;
    }
    
    const teamName = parts[0].trim();
    const members = parts[1].trim();
    
    if (!teamName || !members) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!');
      return;
    }
    
    try {
      const sheet = await getSheet('teams');
      await sheet.addRow({
        teamName: teamName,
        people: members,
        dateReg: new Date().toISOString(),
        chatId: chatId
      });
      
      delete userStates[userId];
      
      const message = `‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>

üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <b>${teamName}</b>
üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${members}

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /answer`;

      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      
    } catch (error) {
      console.error('Error saving team:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      delete userStates[userId];
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
  if (state.action === 'answer') {
    if (!text.includes('|')) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ | –í–∞—à –æ—Ç–≤–µ—Ç</code>', { parse_mode: 'HTML' });
      return;
    }
    
    const parts = text.split('|');
    if (parts.length !== 2) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª |');
      return;
    }
    
    const questionNum = parts[0].trim();
    const answer = parts[1].trim();
    
    if (!questionNum || !answer) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏!');
      return;
    }
    
    if (isNaN(parseInt(questionNum))) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!');
      return;
    }
    
    try {
      const sheet = await getSheet('answers');
      await sheet.addRow({
        teamName: state.teamName,
        questionNumber: questionNum,
        answer: answer,
        timeSend: new Date().toISOString()
      });
      
      delete userStates[userId];
      
      const message = `‚úÖ <b>–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!</b>

üìå –ö–æ–º–∞–Ω–¥–∞: <b>${state.teamName}</b>
üî¢ –í–æ–ø—Ä–æ—Å: ${questionNum}
‚úçÔ∏è –û—Ç–≤–µ—Ç: ${answer}

–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /answer`;

      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      
    } catch (error) {
      console.error('Error saving answer:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      delete userStates[userId];
    }
  }
});

// Health check endpoint
app.get('/', (req, res) => {
  res.send('Bot is running!');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
