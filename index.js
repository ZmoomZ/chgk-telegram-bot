const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');

const app = express();
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const SHEET_ID = process.env.SHEET_ID;
const GOOGLE_SERVICE_ACCOUNT_EMAIL = process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL;
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_TOKEN);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const userStates = {};

// Google Sheets Auth
const auth = new google.auth.GoogleAuth({
  credentials: {
    client_email: GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: GOOGLE_PRIVATE_KEY,
  },
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const sheets = google.sheets({ version: 'v4', auth });

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π
async function appendRow(sheetName, values) {
  await sheets.spreadsheets.values.append({
    spreadsheetId: SHEET_ID,
    range: `${sheetName}!A:Z`,
    valueInputOption: 'USER_ENTERED',
    resource: { values: [values] },
  });
}

async function getRows(sheetName) {
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId: SHEET_ID,
    range: `${sheetName}!A:Z`,
  });
  return response.data.values || [];
}

// Webhook handler
app.post('/webhook', async (req, res) => {
  try {
    await bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (error) {
    console.error('Webhook error:', error);
    res.sendStatus(500);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  
  const message = `üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ß–ì–ö –ù–æ–≤—ã–π –ì–æ–¥ 2025!</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

üîπ /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
üîπ /answer - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
üîπ /myteam - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É
üîπ /help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã! üëá`;

  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const message = `‚ùì <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

<b>1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b>
/register
–ó–∞—Ç–µ–º: <code>–ù–∞–∑–≤–∞–Ω–∏–µ | –£—á–∞—Å—Ç–Ω–∏–∫–∏</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>–ó–Ω–∞—Ç–æ–∫–∏ | –ò–≤–∞–Ω, –ü–µ—Ç—Ä, –ú–∞—Ä–∏—è</code>

<b>2. –û—Ç–≤–µ—Ç:</b>
/answer
–ó–∞—Ç–µ–º: <code>–ù–æ–º–µ—Ä | –û—Ç–≤–µ—Ç</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>1 | –ü—É—à–∫–∏–Ω</code>`;

  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ /register
bot.onText(/\/register/, async (msg) => {
  console.log('Register command received from:', msg.chat.id);
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    console.log('Fetching teams sheet...');
    const rows = await getRows('teams');
    console.log('Teams rows:', rows.length);
    const existingTeam = rows.find(row => row[3] == chatId);
    
    if (existingTeam) {
      console.log('Team already exists');
      await bot.sendMessage(chatId, 
        `‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É: <b>${existingTeam[0]}</b>`,
        { parse_mode: 'HTML' }
      );
      return;
    }
  } catch (error) {
    console.error('Error checking team:', error.message);
  }
  
  console.log('Setting user state for:', userId);
  userStates[userId] = { action: 'register' };
  
  const message = `üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–ù–∞–∑–≤–∞–Ω–∏–µ | –£—á–∞—Å—Ç–Ω–∏–∫1, –£—á–∞—Å—Ç–Ω–∏–∫2</code>

<b>–ü—Ä–∏–º–µ—Ä:</b>
<code>–ó–Ω–∞—Ç–æ–∫–∏ | –ò–≤–∞–Ω, –ü–µ—Ç—Ä, –ú–∞—Ä–∏—è</code>`;

  console.log('Sending message to:', chatId);
  await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  console.log('Message sent successfully');
});
// –ö–æ–º–∞–Ω–¥–∞ /answer
bot.onText(/\/answer/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  try {
    const rows = await getRows('teams');
    const team = rows.find(row => row[3] == chatId);
    
    if (!team) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /register');
      return;
    }
    
    userStates[userId] = { action: 'answer', teamName: team[0] };
    
    const message = `‚úçÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞</b>

–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: <b>${team[0]}</b>

–§–æ—Ä–º–∞—Ç: <code>–ù–æ–º–µ—Ä | –û—Ç–≤–µ—Ç</code>

<b>–ü—Ä–∏–º–µ—Ä:</b> <code>1 | –ü—É—à–∫–∏–Ω</code>`;

    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error getting team:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /myteam
bot.onText(/\/myteam/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const rows = await getRows('teams');
    const team = rows.find(row => row[3] == chatId);
    
    if (!team) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register');
      return;
    }
    
    const message = `üë• <b>–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:</b>

üìå <b>${team[0]}</b>
üë§ ${team[1]}
üìÖ ${new Date(team[2]).toLocaleString('ru-RU')}`;

    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    
  } catch (error) {
    console.error('Error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (msg.text && msg.text.startsWith('/')) {
    return;
  }
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const state = userStates[userId];
  if (!state) return;
  
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  if (state.action === 'register') {
    if (!text.includes('|')) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–ù–∞–∑–≤–∞–Ω–∏–µ | –£—á–∞—Å—Ç–Ω–∏–∫–∏</code>', { parse_mode: 'HTML' });
      return;
    }
    
    const parts = text.split('|');
    if (parts.length !== 2) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª |');
      return;
    }
    
    const teamName = parts[0].trim();
    const members = parts[1].trim();
    
    if (!teamName || !members) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }
    
    try {
      await appendRow('teams', [teamName, members, new Date().toISOString(), chatId]);
      delete userStates[userId];
      
      const message = `‚úÖ <b>–ö–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>

üìå <b>${teamName}</b>
üë• ${members}

–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–≤–µ—Ç—ã: /answer`;

      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      
    } catch (error) {
      console.error('Error saving team:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      delete userStates[userId];
    }
  }
  
  // –û—Ç–≤–µ—Ç
  if (state.action === 'answer') {
    if (!text.includes('|')) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: <code>–ù–æ–º–µ—Ä | –û—Ç–≤–µ—Ç</code>', { parse_mode: 'HTML' });
      return;
    }
    
    const parts = text.split('|');
    if (parts.length !== 2) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª |');
      return;
    }
    
    const questionNum = parts[0].trim();
    const answer = parts[1].trim();
    
    if (!questionNum || !answer) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }
    
    if (isNaN(parseInt(questionNum))) {
      await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!');
      return;
    }
    
    try {
      await appendRow('answers', [state.teamName, questionNum, answer, new Date().toISOString()]);
      delete userStates[userId];
      
      const message = `‚úÖ <b>–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!</b>

üìå <b>${state.teamName}</b>
üî¢ –í–æ–ø—Ä–æ—Å ${questionNum}
‚úçÔ∏è ${answer}

–°–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç: /answer`;

      await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
      
    } catch (error) {
      console.error('Error saving answer:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
      delete userStates[userId];
    }
  }
});

// Health check
app.get('/', (req, res) => {
  res.send('Bot is running!');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
